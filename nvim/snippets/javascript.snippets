# -----------------------------------------------
# Flow control
# -----------------------------------------------

snippet if "if statement" b!
if ($1) {
}
endsnippet

snippet ifelse "if else statement" b!
if ($1) {
} else {
}
endsnippet

snippet ret "return statement" w
return $1
endsnippet

# -----------------------------------------------
# Looping
# -----------------------------------------------

snippet ifor "simple for loop" b!
for (let i = 0; i < $1; i++) {
	$2
}
endsnippet

snippet mapaf "map with arrow function" w
map(($1) => {
	return $2
})
endsnippet

snippet reduceaf "reduce with arrow function" w
reduce((acc, $1) => {
	return $3
}, $2)
endsnippet

snippet filteraf "filter with arrow function" w
filter(($1) => {
	return $2
})
endsnippet

# -----------------------------------------------
# Functions
# -----------------------------------------------

snippet fun "named function" b!
function $1($2) {
	$3
}
endsnippet

snippet afun "arrow function" w
($1) => {
	$2
}
endsnippet

snippet cfun "named function assigned to constant" b!
const $1 = function $2($3) {
	$4
}
endsnippet

snippet cafun "arrow function"
const $1 = ($2) => {
	$3
}
endsnippet

snippet asfun "async named function" b!
async function $1($2) {
	$3
}
endsnippet

# -----------------------------------------------
# Modules
# -----------------------------------------------

# CommonJS
snippet creq "require and assign to constant" b!
const $1 = require('$2')
endsnippet

snippet modex "JS Module Export" b!
module.export = $1
endsnippet

# ES2015 
snippet imp "import" b!
import $1 from '$2'
endsnippet

snippet impdes "import and destructure" b!
import { $1 } from '$2'
endsnippet

snippet expdef "export default" b
export default $1
endsnippet


# -----------------------------------------------
# Other
# -----------------------------------------------

snippet jsclass "JS Class" b!
class $1 {
	constructor() {
	}
}
endsnippet

snippet con "assign to constant" b!
const $1 = $2
endsnippet

snippet descon "destructure and assign to constant" b!
const { $1 } = $2
endsnippet

snippet cawait "await and assign to constant" b!
const $1 = await $2
endsnippet

snippet tag "HTML tag"
<${1:div}>$2</${1/(\w+).*/$1/}>
endsnippet

snippet mtag "Multiline HTML tag"
<${1:div}>
	$2
</${1/(\w+).*/$1/}>
endsnippet

# -----------------------------------------------
# React
# -----------------------------------------------
snippet rcc "React Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		${2:children: PropTypes.node,
		className: PropTypes.string,}
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<${3:div} className={styles.base}>
				$0
			</$3>
		);
	}
}

export default $1;
endsnippet

snippet rrcc "React Redux Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import styles from './${2:$1}.css';

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		children: PropTypes.node,
		className: PropTypes.string,
		dispatch: PropTypes.func.isRequired,
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<div className={styles.base}>
				$3
			</div>
		);
	}
}

function mapStateToProps(state) {
	return {};
}

export default connect(mapStateToProps)($1);
endsnippet

snippet rfc "React Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

function ${1:`!v expand('%:t:r')`}({ $3 }) {
	return (
		<${5:div} className={styles.base}>
			$0
		</$5>
	);
}

$1.defaultProps = {$4};

$1.propTypes = {`!p
props = t[3]

if props:
  snip >> 1
  for prop in props.split(', '):
    snip += prop + ': PropTypes.any,'
`
};

export default $1;
endsnippet

snippet cn "className"
className="$1"
endsnippet

# Component Lifecycle
snippet cwm "Component Will Mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scup "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwup "Component Will Update" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdup "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ren "Render"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	);}
}
endsnippet

snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet us.c "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

snippet us.r "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
	switch (action.type) {
		default:
			return state;
	}
}${0:;}
endsnippet

snippet us.cb "useCallback" w
useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet us.m "useMemo" w
const $1 = useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet us.rf "useRef" w
const $1 = useRef($2)${0:;}
endsnippet

# -----------------------------------------------
# Material UI
# -----------------------------------------------
snippet mui.c "import from Material UI core" w
import $1 from '@material-ui/core/$1';
endsnippet
